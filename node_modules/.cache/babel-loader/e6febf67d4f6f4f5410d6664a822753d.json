{"ast":null,"code":"var _jsxFileName = \"/home/leonrod/Documents/gobarber-web/src/routes/Route.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types'; // ...rest todo o restante das propriedades que o componente recebeu\n// (path, exact e etc)\n\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = false;\n\n  if (!signed && isPrivate) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (signed && !isPrivate) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    component: Component,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }));\n}\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.elementType.isRequired || PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n};\nRouteWrapper.defaultProps = {\n  isPrivate: false\n};","map":{"version":3,"sources":["/home/leonrod/Documents/gobarber-web/src/routes/Route.js"],"names":["React","Route","Redirect","PropTypes","RouteWrapper","component","Component","isPrivate","rest","signed","propTypes","bool","elementType","isRequired","oneOfType","element","func","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsB;AACnCC,EAAAA,SAAS,EAAEC,SADwB;AAEnCC,EAAAA,SAFmC;AAGnC,KAAGC;AAHgC,CAAtB,EAIZ;AAED,QAAMC,MAAM,GAAG,KAAf;;AAEA,MAAG,CAACA,MAAD,IAAWF,SAAd,EAAyB;AACvB,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAGE,MAAM,IAAI,CAACF,SAAd,EAAwB;AACtB,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,sBACE,oBAAC,KAAD,oBAAWC,IAAX;AAAiB,IAAA,SAAS,EAAEF,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAID;AAEDF,YAAY,CAACM,SAAb,GAAyB;AACvBH,EAAAA,SAAS,EAAEJ,SAAS,CAACQ,IADE;AAEvBN,EAAAA,SAAS,EAAEF,SAAS,CAACS,WAAV,CAAsBC,UAAtB,IAAoCV,SAAS,CAACW,SAAV,CAAoB,CAACX,SAAS,CAACY,OAAX,EAAoBZ,SAAS,CAACa,IAA9B,CAApB;AAFxB,CAAzB;AAKAZ,YAAY,CAACa,YAAb,GAA4B;AAC1BV,EAAAA,SAAS,EAAE;AADe,CAA5B","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n// ...rest todo o restante das propriedades que o componente recebeu\n// (path, exact e etc)\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n\n  const signed = false;\n\n  if(!signed && isPrivate) {\n    return <Redirect to=\"/\" />\n  }\n\n  if(signed && !isPrivate){\n    return <Redirect to=\"/dashboard\" />\n  }\n\n  return(\n    <Route {...rest} component={Component}>\n    </Route>\n  )\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.elementType.isRequired || PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n}\n\nRouteWrapper.defaultProps = {\n  isPrivate: false,\n}\n"]},"metadata":{},"sourceType":"module"}