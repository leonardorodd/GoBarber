{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess, signFailure } from './actions';\nimport history from '../../../services/history';\nimport { toast } from 'react-toastify';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    console.tron.log(`Email: ${email} Senha: ${password}`); // retorna uma promisse e é assíncrono\n    // const response = yield call(api.post, '/sessions',\n    //   {\n    //     email,\n    //     password\n    //   },\n    //   {\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     }\n    //   }\n    // )\n\n    function getData(success) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (success) {\n            resolve({\n              data: {\n                token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n                user: {\n                  provider: true,\n                  nome: 'maria',\n                  email: email\n                }\n              }\n            });\n          } else {\n            reject('ASDASDAS');\n          }\n        }, 5000);\n      });\n    }\n\n    const response = yield call(getData, false);\n    const {\n      token,\n      user\n    } = response.data; // provider prestador de serviço\n\n    if (!user.provider) {\n      toast.error('usuário não é prestador');\n      return;\n    }\n\n    yield put(signInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (err) {\n    yield put(signFailure());\n    toast.error('Falha na autenticação, verifique seus dados');\n  }\n}\nexport function* signUp({\n  payload\n}) {\n  const {\n    name,\n    email,\n    password\n  } = payload;\n  yield call(api.post, '/', {\n    name,\n    email,\n    password\n  });\n}\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn), takeLatest('@auth/SIGN_UP_REQUEST', signUp)]);","map":{"version":3,"sources":["/home/leonrod/Documents/gobarber-web/src/store/modules/auth/sagas.js"],"names":["all","takeLatest","call","put","api","signInSuccess","signFailure","history","toast","signIn","payload","email","password","console","tron","log","getData","success","Promise","resolve","reject","setTimeout","data","token","user","provider","nome","response","error","push","err","signUp","name","post"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,WAA3C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA6B;AAElC,MAAI;AAEF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,OAA5B;AAEAG,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAkB,UAASJ,KAAM,WAAUC,QAAS,EAApD,EAJE,CAKF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAASI,OAAT,CAAiBC,OAAjB,EAAyB;AACvB,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrCC,QAAAA,UAAU,CAAC,MAAM;AACf,cAAGJ,OAAH,EAAW;AACTE,YAAAA,OAAO,CAAC;AACNG,cAAAA,IAAI,EAAE;AACJC,gBAAAA,KAAK,EAAE,wEADH;AAEJC,gBAAAA,IAAI,EAAE;AACJC,kBAAAA,QAAQ,EAAE,IADN;AAEJC,kBAAAA,IAAI,EAAE,OAFF;AAGJf,kBAAAA,KAAK,EAAEA;AAHH;AAFF;AADA,aAAD,CAAP;AAUD,WAXD,MAWK;AACHS,YAAAA,MAAM,CAAC,UAAD,CAAN;AACD;AACF,SAfS,EAeP,IAfO,CAAV;AAgBD,OAjBM,CAAP;AAkBD;;AAED,UAAMO,QAAQ,GAAG,MAAMzB,IAAI,CAACc,OAAD,EAAU,KAAV,CAA3B;AAEA,UAAM;AAAEO,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBG,QAAQ,CAACL,IAAjC,CAzCE,CA2CF;;AACA,QAAG,CAACE,IAAI,CAACC,QAAT,EAAmB;AACjBjB,MAAAA,KAAK,CAACoB,KAAN,CAAY,yBAAZ;AACA;AACD;;AAED,UAAMzB,GAAG,CAACE,aAAa,CAACkB,KAAD,EAAQC,IAAR,CAAd,CAAT;AAEAjB,IAAAA,OAAO,CAACsB,IAAR,CAAa,YAAb;AAED,GArDD,CAqDC,OAAMC,GAAN,EAAW;AACV,UAAM3B,GAAG,CAACG,WAAW,EAAZ,CAAT;AACAE,IAAAA,KAAK,CAACoB,KAAN,CAAY,6CAAZ;AACD;AACF;AAED,OAAO,UAAUG,MAAV,CAAiB;AAAErB,EAAAA;AAAF,CAAjB,EAA6B;AAClC,QAAM;AAAEsB,IAAAA,IAAF;AAAQrB,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BF,OAAlC;AAEA,QAAMR,IAAI,CAACE,GAAG,CAAC6B,IAAL,EAAW,GAAX,EAAgB;AACxBD,IAAAA,IADwB;AAExBrB,IAAAA,KAFwB;AAGxBC,IAAAA;AAHwB,GAAhB,CAAV;AAOD;AAED,eAAeZ,GAAG,CAAE,CAClBC,UAAU,CAAC,uBAAD,EAA0BQ,MAA1B,CADQ,EAElBR,UAAU,CAAC,uBAAD,EAA0B8B,MAA1B,CAFQ,CAAF,CAAlB","sourcesContent":["import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess, signFailure } from './actions';\nimport history from '../../../services/history';\nimport { toast } from 'react-toastify';\n\nexport function* signIn({ payload }){\n\n  try {\n\n    const { email, password } = payload;\n\n    console.tron.log(`Email: ${email} Senha: ${password}`);\n    // retorna uma promisse e é assíncrono\n    // const response = yield call(api.post, '/sessions',\n    //   {\n    //     email,\n    //     password\n    //   },\n    //   {\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     }\n    //   }\n    // )\n\n    function getData(success){\n      return new Promise((resolve, reject)=> {\n        setTimeout(() => {\n          if(success){\n            resolve({\n              data: {\n                token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n                user: {\n                  provider: true,\n                  nome: 'maria',\n                  email: email\n                }\n              }\n            })\n          }else{\n            reject('ASDASDAS')\n          }\n        }, 5000);\n      });\n    }\n\n    const response = yield call(getData, false);\n\n    const { token, user } = response.data;\n\n    // provider prestador de serviço\n    if(!user.provider) {\n      toast.error('usuário não é prestador')\n      return;\n    }\n\n    yield put(signInSuccess(token, user));\n\n    history.push('/dashboard')\n\n  }catch(err) {\n    yield put(signFailure());\n    toast.error('Falha na autenticação, verifique seus dados');\n  }\n}\n\nexport function* signUp({ payload }){\n  const { name, email, password } = payload;\n\n  yield call(api.post, '/', {\n    name,\n    email,\n    password\n  })\n\n\n}\n\nexport default all ([\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn),\n  takeLatest('@auth/SIGN_UP_REQUEST', signUp)\n]);\n"]},"metadata":{},"sourceType":"module"}