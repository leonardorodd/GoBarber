{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess, signFailure } from './actions';\nimport history from '../../../services/history';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    console.tron.log(`Email: ${email} Senha: ${password}`); // retorna uma promisse e é assíncrono\n    // const response = yield call(api.post, '/sessions',\n    //   {\n    //     email,\n    //     password\n    //   },\n    //   {\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     }\n    //   }\n    // )\n\n    function getData() {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (1 === 1) {\n            resolve({\n              data: {\n                token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n                user: {\n                  provider: true,\n                  nome: 'maria',\n                  email: email\n                }\n              }\n            });\n          } else {\n            reject({\n              data: {\n                message: 'se fudeo'\n              }\n            });\n          }\n        }, 5000);\n      });\n    }\n\n    const response = yield call(getData, 1);\n    const {\n      token,\n      user\n    } = response.data; // provider prestador de serviço\n\n    if (!user.provider) {\n      console.log('usuário não é prestador');\n      return;\n    }\n\n    yield put(signInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (err) {\n    console.log(err);\n    yield put(signFailure());\n  }\n}\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);","map":{"version":3,"sources":["/home/leonrod/Documents/gobarber-web/src/store/modules/auth/sagas.js"],"names":["all","takeLatest","call","put","api","signInSuccess","signFailure","history","signIn","payload","email","password","console","tron","log","getData","Promise","resolve","reject","setTimeout","data","token","user","provider","nome","message","response","push","err"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,WAA3C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA6B;AAElC,MAAI;AAEF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,OAA5B;AAEAG,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAkB,UAASJ,KAAM,WAAUC,QAAS,EAApD,EAJE,CAKF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAASI,OAAT,GAAkB;AAChB,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrCC,QAAAA,UAAU,CAAC,MAAM;AACf,cAAG,MAAI,CAAP,EAAS;AACPF,YAAAA,OAAO,CAAC;AACNG,cAAAA,IAAI,EAAE;AACJC,gBAAAA,KAAK,EAAE,wEADH;AAEJC,gBAAAA,IAAI,EAAE;AACJC,kBAAAA,QAAQ,EAAE,IADN;AAEJC,kBAAAA,IAAI,EAAE,OAFF;AAGJd,kBAAAA,KAAK,EAAEA;AAHH;AAFF;AADA,aAAD,CAAP;AAUD,WAXD,MAWK;AACHQ,YAAAA,MAAM,CAAC;AACLE,cAAAA,IAAI,EAAE;AACJK,gBAAAA,OAAO,EAAE;AADL;AADD,aAAD,CAAN;AAKD;AACF,SAnBS,EAmBP,IAnBO,CAAV;AAoBD,OArBM,CAAP;AAsBD;;AAED,UAAMC,QAAQ,GAAG,MAAMxB,IAAI,CAACa,OAAD,EAAU,CAAV,CAA3B;AAEA,UAAM;AAAEM,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBI,QAAQ,CAACN,IAAjC,CA7CE,CA+CF;;AACA,QAAG,CAACE,IAAI,CAACC,QAAT,EAAmB;AACjBX,MAAAA,OAAO,CAACE,GAAR,CAAY,yBAAZ;AACA;AACD;;AAED,UAAMX,GAAG,CAACE,aAAa,CAACgB,KAAD,EAAQC,IAAR,CAAd,CAAT;AAEAf,IAAAA,OAAO,CAACoB,IAAR,CAAa,YAAb;AAED,GAzDD,CAyDC,OAAMC,GAAN,EAAW;AACVhB,IAAAA,OAAO,CAACE,GAAR,CAAYc,GAAZ;AACA,UAAMzB,GAAG,CAACG,WAAW,EAAZ,CAAT;AACD;AACF;AAED,eAAeN,GAAG,CAAE,CAClBC,UAAU,CAAC,uBAAD,EAA0BO,MAA1B,CADQ,CAAF,CAAlB","sourcesContent":["import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess, signFailure } from './actions';\nimport history from '../../../services/history';\n\nexport function* signIn({ payload }){\n\n  try {\n\n    const { email, password } = payload;\n\n    console.tron.log(`Email: ${email} Senha: ${password}`);\n    // retorna uma promisse e é assíncrono\n    // const response = yield call(api.post, '/sessions',\n    //   {\n    //     email,\n    //     password\n    //   },\n    //   {\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     }\n    //   }\n    // )\n\n    function getData(){\n      return new Promise((resolve, reject)=> {\n        setTimeout(() => {\n          if(1===1){\n            resolve({\n              data: {\n                token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n                user: {\n                  provider: true,\n                  nome: 'maria',\n                  email: email\n                }\n              }\n            })\n          }else{\n            reject({\n              data: {\n                message: 'se fudeo'\n              }\n            })\n          }\n        }, 5000);\n      });\n    }\n\n    const response = yield call(getData, 1);\n\n    const { token, user } = response.data;\n\n    // provider prestador de serviço\n    if(!user.provider) {\n      console.log('usuário não é prestador')\n      return;\n    }\n\n    yield put(signInSuccess(token, user));\n\n    history.push('/dashboard')\n\n  }catch(err) {\n    console.log(err)\n    yield put(signFailure());\n  }\n}\n\nexport default all ([\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn)\n]);\n"]},"metadata":{},"sourceType":"module"}