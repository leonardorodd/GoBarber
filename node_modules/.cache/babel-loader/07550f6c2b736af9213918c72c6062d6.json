{"ast":null,"code":"var _jsxFileName = \"/home/leonrod/Documents/gobarber-web/src/routes/Route.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport AuthLayout from '../pages/_layouts/auth';\nimport DefaultLayout from '../pages/_layouts/defaut';\nimport store from '../store'; // ...rest todo o restante das propriedades que o componente recebeu\n// (path, exact e etc)\n\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = store.getState().auth.signed;\n\n  if (!signed && isPrivate) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (signed && !isPrivate) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const Layout = signed ? DefaultLayout : AuthLayout;\n  return (\n    /*#__PURE__*/\n    //<Route {...rest} component={Component}>\n    React.createElement(Route, Object.assign({}, rest, {\n      render: props => /*#__PURE__*/React.createElement(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }\n    }))\n  );\n}\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.elementType.isRequired || PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\nRouteWrapper.defaultProps = {\n  isPrivate: false\n};","map":{"version":3,"sources":["/home/leonrod/Documents/gobarber-web/src/routes/Route.js"],"names":["React","Route","Redirect","PropTypes","AuthLayout","DefaultLayout","store","RouteWrapper","component","Component","isPrivate","rest","signed","getState","auth","Layout","props","propTypes","bool","elementType","isRequired","oneOfType","element","func","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AAEA,OAAOC,KAAP,MAAkB,UAAlB,C,CACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsB;AACnCC,EAAAA,SAAS,EAAEC,SADwB;AAEnCC,EAAAA,SAFmC;AAGnC,KAAGC;AAHgC,CAAtB,EAIZ;AAED,QAAMC,MAAM,GAAGN,KAAK,CAACO,QAAN,GAAiBC,IAAjB,CAAsBF,MAArC;;AAEA,MAAG,CAACA,MAAD,IAAWF,SAAd,EAAyB;AACvB,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAGE,MAAM,IAAI,CAACF,SAAd,EAAwB;AACtB,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,QAAMK,MAAM,GAAGH,MAAM,GAAGP,aAAH,GAAmBD,UAAxC;AAEA;AAAA;AACE;AACA,wBAAC,KAAD,oBAAWO,IAAX;AACE,MAAA,MAAM,EAAEK,KAAK,iBACX,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAUD;AAEDT,YAAY,CAACU,SAAb,GAAyB;AACvBP,EAAAA,SAAS,EAAEP,SAAS,CAACe,IADE;AAEvBV,EAAAA,SAAS,EAAEL,SAAS,CAACgB,WAAV,CAAsBC,UAAtB,IAAoCjB,SAAS,CAACkB,SAAV,CAAoB,CAAClB,SAAS,CAACmB,OAAX,EAAoBnB,SAAS,CAACoB,IAA9B,CAApB,EAAyDH;AAFjF,CAAzB;AAKAb,YAAY,CAACiB,YAAb,GAA4B;AAC1Bd,EAAAA,SAAS,EAAE;AADe,CAA5B","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport AuthLayout from '../pages/_layouts/auth';\nimport DefaultLayout from '../pages/_layouts/defaut';\n\nimport store from '../store';\n// ...rest todo o restante das propriedades que o componente recebeu\n// (path, exact e etc)\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n\n  const signed = store.getState().auth.signed;\n\n  if(!signed && isPrivate) {\n    return <Redirect to=\"/\" />\n  }\n\n  if(signed && !isPrivate){\n    return <Redirect to=\"/dashboard\" />\n  }\n\n  const Layout = signed ? DefaultLayout : AuthLayout;\n\n  return(\n    //<Route {...rest} component={Component}>\n    <Route {...rest}\n      render={props => (\n        <Layout>\n          <Component {...props}/>\n        </Layout>\n      )}\n    />\n  )\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.elementType.isRequired || PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n}\n\nRouteWrapper.defaultProps = {\n  isPrivate: false,\n}\n"]},"metadata":{},"sourceType":"module"}