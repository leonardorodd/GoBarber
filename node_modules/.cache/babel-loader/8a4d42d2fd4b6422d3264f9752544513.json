{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess, signFailure, signUpSuccess } from './actions';\nimport history from '../../../services/history';\nimport { toast } from 'react-toastify';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    console.tron.log(`Email: ${email} Senha: ${password}`); // retorna uma promisse e é assíncrono\n    // const response = yield call(api.post, '/sessions',\n    //   {\n    //     email,\n    //     password\n    //   },\n    //   {\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     }\n    //   }\n    // )\n\n    function getData(success) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (success) {\n            resolve({\n              data: {\n                token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n                user: {\n                  provider: true,\n                  nome: 'maria',\n                  email: email\n                }\n              }\n            });\n          } else {\n            reject('ASDASDAS');\n          }\n        }, 5000);\n      });\n    }\n\n    const response = yield call(getData, true);\n    const {\n      token,\n      user\n    } = response.data; // provider prestador de serviço\n\n    if (!user.provider) {\n      toast.error('usuário não é prestador');\n      return;\n    } // add user token\n\n\n    api.defaults.headers['Authorization'] = `Bearer ${token}`;\n    yield put(signInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (err) {\n    yield put(signFailure());\n    toast.error('Falha na autenticação, verifique seus dados');\n  }\n}\nexport function* signUp({\n  payload\n}) {\n  //const { name, email, password } = payload;\n  try {\n    console.tron.log(payload); // yield call(api.post, '/users', {\n    //   name,\n    //   email,\n    //   password,\n    //   provider: true\n    // })\n\n    function getData(success) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (success) {\n            resolve({\n              data: {\n                token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n                user: {\n                  provider: true,\n                  nome: 'maria'\n                }\n              }\n            });\n          } else {\n            reject('ASDASDAS');\n          }\n        }, 5000);\n      });\n    }\n\n    const response = yield call(getData, true);\n    console.log(response);\n    yield put(signUpSuccess());\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro, verifique seus dados!');\n    yield put(signFailure());\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const {\n    token\n  } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = token;\n  }\n}\nexport default all([takeLatest('persist/REHYDRATE', setToken), takeLatest('@auth/SIGN_IN_REQUEST', signIn), takeLatest('@auth/SIGN_UP_REQUEST', signUp)]);","map":{"version":3,"sources":["/home/leonrod/Documents/gobarber-web/src/store/modules/auth/sagas.js"],"names":["all","takeLatest","call","put","api","signInSuccess","signFailure","signUpSuccess","history","toast","signIn","payload","email","password","console","tron","log","getData","success","Promise","resolve","reject","setTimeout","data","token","user","provider","nome","response","error","defaults","headers","push","err","signUp","setToken","auth","Authorization"],"mappings":"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","sourcesContent":["import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess, signFailure, signUpSuccess } from './actions';\nimport history from '../../../services/history';\nimport { toast } from 'react-toastify';\n\nexport function* signIn({ payload }){\n\n  try {\n\n    const { email, password } = payload;\n\n    console.tron.log(`Email: ${email} Senha: ${password}`);\n    // retorna uma promisse e é assíncrono\n    // const response = yield call(api.post, '/sessions',\n    //   {\n    //     email,\n    //     password\n    //   },\n    //   {\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     }\n    //   }\n    // )\n\n    function getData(success){\n      return new Promise((resolve, reject)=> {\n        setTimeout(() => {\n          if(success){\n            resolve({\n              data: {\n                token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n                user: {\n                  provider: true,\n                  nome: 'maria',\n                  email: email\n                }\n              }\n            })\n          }else{\n            reject('ASDASDAS')\n          }\n        }, 5000);\n      });\n    }\n\n    const response = yield call(getData, true);\n\n    const { token, user } = response.data;\n\n    // provider prestador de serviço\n    if(!user.provider) {\n      toast.error('usuário não é prestador')\n      return;\n    }\n\n    // add user token\n    api.defaults.headers['Authorization'] = `Bearer ${token}`\n\n    yield put(signInSuccess(token, user));\n\n    history.push('/dashboard')\n\n  }catch(err) {\n    yield put(signFailure());\n    toast.error('Falha na autenticação, verifique seus dados');\n  }\n}\n\nexport function* signUp({ payload }){\n\n  //const { name, email, password } = payload;\n\n  try {\n\n    console.tron.log(payload)\n\n    // yield call(api.post, '/users', {\n    //   name,\n    //   email,\n    //   password,\n    //   provider: true\n    // })\n\n    function getData(success){\n      return new Promise((resolve, reject)=> {\n        setTimeout(() => {\n          if(success){\n            resolve({\n              data: {\n                token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n                user: {\n                  provider: true,\n                  nome: 'maria',\n                }\n              }\n            })\n          }else{\n            reject('ASDASDAS')\n          }\n        }, 5000);\n      });\n    }\n\n    const response = yield call(getData, true);\n\n    console.log(response);\n\n    yield put(signUpSuccess())\n\n    history.push('/');\n\n  }catch(err) {\n    toast.error('Falha no cadastro, verifique seus dados!');\n\n    yield put(signFailure());\n  }\n}\n\nexport function setToken({ payload }){\n\n  if(!payload) return;\n\n  const { token } = payload.auth;\n\n  if(token){\n    api.defaults.headers.Authorization = token;\n  }\n\n}\n\nexport default all ([\n  takeLatest('persist/REHYDRATE', setToken),\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn),\n  takeLatest('@auth/SIGN_UP_REQUEST', signUp)\n]);\n"]},"metadata":{},"sourceType":"module"}