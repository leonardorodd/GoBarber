{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess } from './actions';\nimport history from '../../../services/history';\nexport function* signIn({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload;\n  console.tron.log(`Email: ${email} Senha: ${password}`); // retorna uma promisse e é assíncrono\n  // const response = yield call(api.post, '/sessions',\n  //   {\n  //     email,\n  //     password\n  //   },\n  //   {\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     }\n  //   }\n  // )\n\n  const response = function a() {\n    return {\n      data: {\n        token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n        user: {\n          provider: true,\n          nome: 'maria',\n          email: email\n        }\n      }\n    };\n  };\n\n  const {\n    token,\n    user\n  } = response.data; // provider prestador de serviço\n\n  if (!user.provider) {\n    console.log('usuário não é prestador');\n    return;\n  }\n\n  yield put(signInSuccess(token, user));\n}\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);","map":{"version":3,"sources":["/home/leonrod/Documents/gobarber-web/src/store/modules/auth/sagas.js"],"names":["all","takeLatest","call","put","api","signInSuccess","history","signIn","payload","email","password","console","tron","log","response","a","data","token","user","provider","nome"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA6B;AAElC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,OAA5B;AAEAG,EAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAkB,UAASJ,KAAM,WAAUC,QAAS,EAApD,EAJkC,CAKlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMI,QAAQ,GAAG,SAASC,CAAT,GAAc;AAC9B,WAAO;AACJC,MAAAA,IAAI,EAAE;AACNC,QAAAA,KAAK,EAAE,wEADD;AAENC,QAAAA,IAAI,EAAE;AACJC,UAAAA,QAAQ,EAAE,IADN;AAEJC,UAAAA,IAAI,EAAE,OAFF;AAGJX,UAAAA,KAAK,EAAEA;AAHH;AAFA;AADF,KAAP;AAUF,GAXC;;AAaA,QAAM;AAAEQ,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBJ,QAAQ,CAACE,IAAjC,CA/BkC,CAkClC;;AACA,MAAG,CAACE,IAAI,CAACC,QAAT,EAAmB;AACjBR,IAAAA,OAAO,CAACE,GAAR,CAAY,yBAAZ;AACA;AACD;;AAED,QAAMV,GAAG,CAACE,aAAa,CAACY,KAAD,EAAQC,IAAR,CAAd,CAAT;AACD;AAED,eAAelB,GAAG,CAAE,CAClBC,UAAU,CAAC,uBAAD,EAA0BM,MAA1B,CADQ,CAAF,CAAlB","sourcesContent":["import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess } from './actions';\nimport history from '../../../services/history';\n\nexport function* signIn({ payload }){\n\n  const { email, password } = payload;\n\n  console.tron.log(`Email: ${email} Senha: ${password}`);\n  // retorna uma promisse e é assíncrono\n  // const response = yield call(api.post, '/sessions',\n  //   {\n  //     email,\n  //     password\n  //   },\n  //   {\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     }\n  //   }\n  // )\n\n  const response = function a () {\n   return {\n      data: {\n      token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n      user: {\n        provider: true,\n        nome: 'maria',\n        email: email\n      }\n    }\n  }\n}\n\n  const { token, user } = response.data;\n\n\n  // provider prestador de serviço\n  if(!user.provider) {\n    console.log('usuário não é prestador')\n    return;\n  }\n\n  yield put(signInSuccess(token, user));\n}\n\nexport default all ([\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn)\n]);\n"]},"metadata":{},"sourceType":"module"}