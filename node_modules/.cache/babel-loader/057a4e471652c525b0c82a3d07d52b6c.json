{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess } from './actions';\nimport history from '../../../services/history';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload; //console.tron.log(`Email: ${email} Senha: ${password}`);\n    // retorna uma promisse e é assíncrono\n    // const response = yield call(api.post, '/sessions',\n    //   {\n    //     email,\n    //     password\n    //   },\n    //   {\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     }\n    //   }\n    // )\n\n    function getData() {\n      return new Promise(resolve => {\n        setTimeout(() => resolve({\n          data: {\n            token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n            user: {\n              provider: true,\n              nome: 'maria',\n              email: email\n            }\n          }\n        }), 5000);\n      });\n    }\n\n    const response = yield call(getData);\n    const {\n      token,\n      user\n    } = response.data; // provider prestador de serviço\n\n    if (!user.provider) {\n      console.log('usuário não é prestador');\n      return;\n    }\n\n    yield put(signInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (e) {}\n}\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);","map":{"version":3,"sources":["/home/leonrod/Documents/gobarber-web/src/store/modules/auth/sagas.js"],"names":["all","takeLatest","call","put","api","signInSuccess","history","signIn","payload","email","password","getData","Promise","resolve","setTimeout","data","token","user","provider","nome","response","console","log","push","e"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA6B;AAElC,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,OAA5B,CADE,CAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAASG,OAAT,GAAkB;AAChB,aAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BC,QAAAA,UAAU,CAAC,MACTD,OAAO,CAAC;AACNE,UAAAA,IAAI,EAAE;AACJC,YAAAA,KAAK,EAAE,wEADH;AAEJC,YAAAA,IAAI,EAAE;AACJC,cAAAA,QAAQ,EAAE,IADN;AAEJC,cAAAA,IAAI,EAAE,OAFF;AAGJV,cAAAA,KAAK,EAAEA;AAHH;AAFF;AADA,SAAD,CADC,EAWR,IAXQ,CAAV;AAYD,OAbM,CAAP;AAcD;;AAED,UAAMW,QAAQ,GAAG,MAAMlB,IAAI,CAACS,OAAD,CAA3B;AAEA,UAAM;AAAEK,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBG,QAAQ,CAACL,IAAjC,CApCI,CAsCJ;;AACA,QAAG,CAACE,IAAI,CAACC,QAAT,EAAmB;AACjBG,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA;AACD;;AAED,UAAMnB,GAAG,CAACE,aAAa,CAACW,KAAD,EAAQC,IAAR,CAAd,CAAT;AAEAX,IAAAA,OAAO,CAACiB,IAAR,CAAa,YAAb;AAEC,GAhDD,CAgDC,OAAMC,CAAN,EAAQ,CAGR;AACF;AAED,eAAexB,GAAG,CAAE,CAClBC,UAAU,CAAC,uBAAD,EAA0BM,MAA1B,CADQ,CAAF,CAAlB","sourcesContent":["import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { signInSuccess } from './actions';\nimport history from '../../../services/history';\n\nexport function* signIn({ payload }){\n\n  try {\n    const { email, password } = payload;\n\n  //console.tron.log(`Email: ${email} Senha: ${password}`);\n  // retorna uma promisse e é assíncrono\n  // const response = yield call(api.post, '/sessions',\n  //   {\n  //     email,\n  //     password\n  //   },\n  //   {\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     }\n  //   }\n  // )\n\n  function getData(){\n    return new Promise(resolve => {\n      setTimeout(()=>\n        resolve({\n          data: {\n            token: 'jkhuisehrseufhsufhilushfldshulfhshlkfhlksdhlfhlksdhlfhkljsdlkfjdlsfjlk',\n            user: {\n              provider: true,\n              nome: 'maria',\n              email: email\n            }\n          }\n        })\n      , 5000);\n    });\n  }\n\n  const response = yield call(getData);\n\n  const { token, user } = response.data;\n\n  // provider prestador de serviço\n  if(!user.provider) {\n    console.log('usuário não é prestador')\n    return;\n  }\n\n  yield put(signInSuccess(token, user));\n\n  history.push('/dashboard')\n\n  }catch(e){\n\n\n  }\n}\n\nexport default all ([\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn)\n]);\n"]},"metadata":{},"sourceType":"module"}